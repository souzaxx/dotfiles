autoload -U +X compinit && compinit
autoload -U +X bashcompinit && bashcompinit

# zsh customization
source $HOME/.zshenv
source $HOME/.zsh/theme/minimal.zsh
source $HOME/.zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh

. $(brew --prefix asdf)/asdf.sh

# Enabling menu selection
zstyle ':completion:*' menu select

bindkey -e
export LC_ALL=en_US.UTF-8

# zsh history {{{
setopt BANG_HIST                 # Treat the '!' character specially during expansion.
setopt EXTENDED_HISTORY          # Write the history file in the ':start:elapsed;command' format.
setopt INC_APPEND_HISTORY        # Write to the history file immediately, not when the shell exits.
setopt SHARE_HISTORY             # Share history between all sessions.
setopt HIST_EXPIRE_DUPS_FIRST    # Expire a duplicate event first when trimming history.
setopt HIST_IGNORE_DUPS          # Do not record an event that was just recorded again.
setopt HIST_IGNORE_ALL_DUPS      # Delete an old recorded event if a new event is a duplicate.
setopt HIST_FIND_NO_DUPS         # Do not display a previously found event.
setopt HIST_IGNORE_SPACE         # Do not record an event starting with a space.
setopt HIST_SAVE_NO_DUPS         # Do not write a duplicate event to the history file.
setopt HIST_VERIFY               # Do not execute immediately upon history expansion.
setopt HIST_REDUCE_BLANKS        # Remove superfluous blanks before recording entry.

# Enable ^, see https://github.com/robbyrussell/oh-my-zsh/issues/449#issuecomment-6973326
setopt NO_NOMATCH
setopt AUTOCD

export WORDCHARS=''
export CLICOLOR=1
export BLOCK_SIZE=human-readable # https://www.gnu.org/software/coreutils/manual/html_node/Block-size.html
export HISTSIZE=10000000
export SAVEHIST=10000000
export HISTFILE=~/.zsh_history
# }}}

BREWBINPATH="$(brew --prefix)/bin"

# Preferred editor for local and remote sessions
if [[ -n $SSH_CONNECTION ]]; then
  export EDITOR='vim'
else
  export EDITOR='vim'
fi

# Colors {
RED='\033[0;31m'
YELLOW='\033[1;33m'
GREEN='\033[1;32m'
ORANGE='\033[1;'
NC='\033[0m'
# }}}

# ALIASES {{{
# General Aliases
alias ls='exa'
alias ll='exa -Flh --git -a'
alias lst="tree"
alias del="trash"
alias rm='echo -ne "${YELLOW}Hold On! (ノಠ益ಠ)ノ彡┻━┻${NC}\n${GREEN}Use del or rm full path: /bin/rm${NC}"'
alias vim="nvim"
alias vi="nvim"

# DOCKER Aliases 
alias docker_clean_images='docker rmi $(docker images -a --filter=dangling=true -q)'
alias docker_clean_ps='docker rm $(docker ps --filter=status=exited --filter=status=created -q)'

# GIT Aliases
alias gs="git status"
alias gc="git clone"
alias ga="git add"
alias gci="git commit"
alias gp="git push -u"

# K8S Aliases
alias mk="minikube"
alias k="kubectl"
alias kg="kubectl get"
alias kd="kubectl describe"
alias kl="kubectl logs"
alias kaf="kubectl apply -f"
alias kdel="kubectl delete"

# TERRAFORM Aliases
alias tfwl="terraform workspace list"
alias tfws="terraform workspace select"
alias tfa="terraform apply"
alias tfp="terraform plan"
alias tfi="tfswitch ; terraform init"
# }}}

# auto complete {{{
complete -o nospace -C terraform terraform
complete -o nospace -C vault vault
source <(kubectl completion zsh)
complete -F __start_kubectl k
eval "$(pyenv init --path)"
autoload bashcompinit && bashcompinit

# }}}

# Setup fzf {{{
if [[ ! "$PATH" == *$(asdf where fzf)/bin* ]]; then
  export PATH="$(asdf where fzf)/bin:$PATH"
fi
[[ $- == *i* ]] && source "$(asdf where fzf)/shell/completion.zsh" 2> /dev/null
source "$(asdf where fzf)/shell/key-bindings.zsh"
# }}}

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}' 'm:{a-zA-Z}={A-Za-z} l:|=* r:|=*'

# AWSCLI Settings {{{
export AWS_PAGER=""
# }}}

# Docker + Minukube {{{
# https://dhwaneetbhatt.com/blog/run-docker-without-docker-desktop-on-macos
eval $(minikube docker-env)
# }}}


# BASH Functions {{{
# Update all git repositories from the current folder.
git_update_all() {
  for project in $(ls -1); do

    echo -ne "Updating ${YELLOW}$project${NC}: "

    cd $project
    current_branch=$(git branch | grep '*' | sed 's/^* //g' | head -1)

    git stash > /dev/null 2>&1 
    git co master > /dev/null 2>&1 
    git pull > /dev/null 2>&1 
    git co $current_branch > /dev/null 2>&1 
    git stash pop > /dev/null 2>&1 
    cd - > /dev/null 2>&1 

    echo -e "${GREEN}Done!${NC}"
  done
}

# ZINIT {{{
source $(brew --prefix)/opt/zinit/zinit.zsh

# Plugins
# kube-ps1
## Show kubernetes current context. 
## Disable by default. Type kubeon to activate
zplugin light jonmosco/kube-ps1
PROMPT='$(kube_ps1)'$PROMPT
kubeoff
# }}}